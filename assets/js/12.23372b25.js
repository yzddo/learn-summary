(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{563:function(t,e,l){"use strict";l.r(e);var v=l(17),n=Object(v.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("p",[t._v("同步：")]),t._v(" "),l("ul",[l("li",[t._v("指在主线程上排队执行的任务，只有前一个任务执行完毕，才能继续执行下一个任务。")]),t._v(" "),l("li",[t._v("程序的执行顺序和任务排列顺序是一致的")])]),t._v(" "),l("p",[t._v("异步：")]),t._v(" "),l("ul",[l("li",[t._v("异步任务指不进入主线程，而进入任务队列的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程。")]),t._v(" "),l("li",[t._v("每一个任务有一个或多个回调函数。前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行。")]),t._v(" "),l("li",[t._v("程序的执行顺序和任务的排列是不一致的，异步的")]),t._v(" "),l("li",[t._v("常见异步操作：setTimeout、setInterval、Ajax")])]),t._v(" "),l("p",[t._v("常见实现异步的方法：回调函数（callback）、事件监听、发布订阅、Promise/A+、生成器generators/yield、async + await")])])}),[],!1,null,null,null);e.default=n.exports}}]);